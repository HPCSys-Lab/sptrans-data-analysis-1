{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2790c1a41049489d94a256459f6a14d3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting Spark application\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr><th>ID</th><th>YARN Application ID</th><th>Kind</th><th>State</th><th>Spark UI</th><th>Driver log</th><th>Current session?</th></tr><tr><td>1</td><td>application_1594993024249_0002</td><td>pyspark</td><td>idle</td><td><a target=\"_blank\" href=\"http://ip-172-31-86-252.ec2.internal:20888/proxy/application_1594993024249_0002/\">Link</a></td><td><a target=\"_blank\" href=\"http://ip-172-31-85-173.ec2.internal:8042/node/containerlogs/container_1594993024249_0002_01_000001/livy\">Link</a></td><td>✔</td></tr></table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SparkSession available as 'spark'.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting boto3\n",
      "Requirement already satisfied: jmespath<1.0.0,>=0.7.1 in /usr/local/lib/python3.7/site-packages (from boto3)\n",
      "Collecting botocore<1.18.0,>=1.17.22 (from boto3)\n",
      "  Using cached https://files.pythonhosted.org/packages/31/f5/e7bc1a13d038b812d1e1dc55b9cb19f6ac86dbc376eb0cd50df5c991ef46/botocore-1.17.22-py2.py3-none-any.whl\n",
      "Collecting s3transfer<0.4.0,>=0.3.0 (from boto3)\n",
      "  Using cached https://files.pythonhosted.org/packages/69/79/e6afb3d8b0b4e96cefbdc690f741d7dd24547ff1f94240c997a26fa908d3/s3transfer-0.3.3-py2.py3-none-any.whl\n",
      "Collecting urllib3<1.26,>=1.20; python_version != \"3.4\" (from botocore<1.18.0,>=1.17.22->boto3)\n",
      "  Using cached https://files.pythonhosted.org/packages/e1/e5/df302e8017440f111c11cc41a6b432838672f5a70aa29227bf58149dc72f/urllib3-1.25.9-py2.py3-none-any.whl\n",
      "Collecting python-dateutil<3.0.0,>=2.1 (from botocore<1.18.0,>=1.17.22->boto3)\n",
      "  Using cached https://files.pythonhosted.org/packages/d4/70/d60450c3dd48ef87586924207ae8907090de0b306af2bce5d134d78615cb/python_dateutil-2.8.1-py2.py3-none-any.whl\n",
      "Collecting docutils<0.16,>=0.10 (from botocore<1.18.0,>=1.17.22->boto3)\n",
      "  Using cached https://files.pythonhosted.org/packages/22/cd/a6aa959dca619918ccb55023b4cb151949c64d4d5d55b3f4ffd7eee0c6e8/docutils-0.15.2-py3-none-any.whl\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/site-packages (from python-dateutil<3.0.0,>=2.1->botocore<1.18.0,>=1.17.22->boto3)\n",
      "Installing collected packages: urllib3, python-dateutil, docutils, botocore, s3transfer, boto3\n",
      "Successfully installed boto3-1.14.22 botocore-1.17.22 docutils-0.15.2 python-dateutil-2.8.1 s3transfer-0.3.3 urllib3-1.25.9"
     ]
    }
   ],
   "source": [
    "# Studying Aux GTFS files to support in the cleaning\n",
    "# Spark Config\n",
    "from pyspark import SparkConf\n",
    "from pyspark import SparkContext\n",
    "\n",
    "spark_conf = (SparkConf().set(\"spark.speculation\", \"false\"))\n",
    "sc = SparkContext.getOrCreate(conf = spark_conf)\n",
    "\n",
    "# spark = sparkSession\n",
    "hadoop_conf = spark.\n",
    "_jsc.hadoopConfiguration()\n",
    "hadoop_conf.set(\"fs.s3a.impl\", \"org.apache.hadoop.fs.s3a.S3AFileSystem\")\n",
    "hadoop_conf.set(\"mapreduce.fileoutputcommitter.algorithm.version\",\"2\")\n",
    "\n",
    "# installing necessary packages for notebook session\n",
    "sc.install_pypi_package(\"boto3\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b247655e172c4fc4a44da78a0871dfa2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting Spark application\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr><th>ID</th><th>YARN Application ID</th><th>Kind</th><th>State</th><th>Spark UI</th><th>Driver log</th><th>Current session?</th></tr><tr><td>0</td><td>application_1606953921564_0001</td><td>pyspark</td><td>idle</td><td><a target=\"_blank\" href=\"http://ip-172-31-93-218.ec2.internal:20888/proxy/application_1606953921564_0001/\" >Link</a></td><td><a target=\"_blank\" href=\"http://ip-172-31-89-109.ec2.internal:8042/node/containerlogs/container_1606953921564_0001_01_000001/livy\" >Link</a></td><td>✔</td></tr></table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SparkSession available as 'spark'.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# studying AL file\n",
    "from pyspark.sql.types import *\n",
    "\n",
    "# Data schema\n",
    "custom_schema = StructType([\n",
    "    StructField(\"line_number\", StringType()),\n",
    "    StructField(\"complement\", StringType()),\n",
    "    StructField(\"line_id\", IntegerType()),\n",
    "    StructField(\"direction\", IntegerType())\n",
    "])\n",
    "\n",
    "results = []\n",
    "direction_options = []\n",
    "\n",
    "# from october 1 to october 31\n",
    "for i in range(1,32):\n",
    "    \n",
    "    # reading aux file\n",
    "    AL_df = spark.read.csv(\"s3a://mobility-traces-sp/aux-files/route-files/AL_1510\" + str(i) +\".txt\",header = 'false',schema=custom_schema)\n",
    "    \n",
    "    # verifying duplicates pair line_number,line_id\n",
    "    AL_df_no_duplicates = AL_df.select('line_number','line_id').distinct()\n",
    "    \n",
    "    # veryfing the posible values for direction field\n",
    "    direction_options = direction_options + [el[\"direction\"] for el in list(AL_df.select(\"direction\").distinct().collect())]\n",
    "    \n",
    "    results.append([AL_df.count(), AL_df_no_duplicates.count()])\n",
    "    \n",
    "results_schema = StructType([\n",
    "    StructField(\"original_count\", IntegerType()),\n",
    "    StructField(\"no_duplicates\", IntegerType())\n",
    "])\n",
    "\n",
    "results_df = spark.createDataFrame(results,schema=results_schema)\n",
    "\n",
    "results_df.repartition(1).write.csv(\"s3://mobility-traces-sp/statistics/AL-file_analysis/distinct_line_id_line_number/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a1d9252e67394c05aee261e8e87acf5d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2}"
     ]
    }
   ],
   "source": [
    "# Results for AL analysis\n",
    "# - There is no duplicate line_number,line_id in each AL file\n",
    "set(direction_options) # confirming that direction option in AL file is 1 and 2 only"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0ea628626df84f4d874664bc16b56a18",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pyspark.sql.types import *\n",
    "\n",
    "AL_schema = StructType([\n",
    "    StructField(\"line_number\", StringType()),\n",
    "    StructField(\"complement\", StringType()),\n",
    "    StructField(\"line_id\", IntegerType()),\n",
    "    StructField(\"direction\", IntegerType())\n",
    "])\n",
    "\n",
    "# reading bus records of october 1 2015\n",
    "traces = spark.read.parquet(\"s3a://mobility-traces-sp/processed-data/using-server-hour/records-between-6-23-only-sp-server-hour/MO_15101/\")\n",
    "AL_df = spark.read.csv(\"s3a://mobility-traces-sp/aux-files/route-files/AL_15101.txt\",header = 'false',schema=AL_schema)\n",
    "\n",
    "# select distinct line_ids in MO file\n",
    "line_id_distinct = traces.select('line_id').distinct()\n",
    "\n",
    "import random\n",
    "\n",
    "# list of distinct line_id in MO file\n",
    "lines = list(line_id_distinct.collect())\n",
    "\n",
    "random_num = random.randint(0,len(lines))\n",
    "\n",
    "# selecting random line_id\n",
    "line_id = lines[random_num][\"line_id\"]\n",
    "\n",
    "# finding the liner_number for line_id\n",
    "# error no treated --> line_id could not be AL, for prod code, this error must be treated\n",
    "line_number_row = AL_df.filter(\"line_id == \" +  str(line_id)).collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c5b429ccbdfb414bb3ed57ccb8adf893",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "line_number = line_number_row[0][\"line_number\"]\n",
    "line_complement = line_number_row[0][\"complement\"]\n",
    "line_direction = line_number_row[0][\"direction\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Consideracoes\n",
    "# - possivelmente vou usar stops.txt para filtrar pontos que nao precisam ser usados de onibus que estao no terminal\n",
    "# - lembrar que nem sempre line_id de MO_XXXX está em AL_XXXX, tem que tratar isso\n",
    "# - lembrar de identificar linhas circulares\n",
    "# - identificar direction 1= 0 ou 1= 1 e 2 =1 ou 2 =0?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4e85901c4f194a5f9065f904d8d34277",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# trying map matching of bus trace to a route/trip/shape\n",
    "\n",
    "# reading trips.txt (csv)\n",
    "trips = spark.read.csv(\"s3a://mobility-traces-sp/aux-files/gtfs/trips.csv\",header = 'true')\n",
    "\n",
    "# possible trips - direction 1 and 0\n",
    "trip_id_0 = f'{line_number}-{line_complement}-0'\n",
    "trip_id_1 = f'{line_number}-{line_complement}-1'\n",
    "\n",
    "# It is possible that th\n",
    "\n",
    "# pode ser que as trips nao estejam disponivels no trips.txt (tem que tratar)\n",
    "\n",
    "# sera que seria mais comparar os dois onibus de uma line_number ao inves do direction?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9957849efd1c4992a9d3d9e79eb8cccc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------+----------+---------+--------------------+------------+--------+\n",
      "|route_id|service_id|  trip_id|       trip_headsign|direction_id|shape_id|\n",
      "+--------+----------+---------+--------------------+------------+--------+\n",
      "| 1015-10|       USD|1015-10-0|Chácara Maria Tri...|           0|   61150|\n",
      "| 1016-10|       USD|1016-10-0|        Center Norte|           0|   53755|\n",
      "| 1016-10|       USD|1016-10-1|  Cemiterio Do Horto|           1|   53756|\n",
      "| 1017-10|       USD|1017-10-0|  Conexão Vila Iorio|           0|   61079|\n",
      "| 1017-10|       USD|1017-10-1|               Perus|           1|   61080|\n",
      "| 1018-10|       USD|1018-10-0|       Metrô Santana|           0|   52197|\n",
      "| 1018-10|       USD|1018-10-1|           Vila Rosa|           1|   52198|\n",
      "| 1021-10|       US_|1021-10-0|   Terminal Pirituba|           0|   58785|\n",
      "| 1021-10|       US_|1021-10-1|   Cohab Brasilândia|           1|   58786|\n",
      "| 1024-10|       USD|1024-10-0|Conexão Petrônio ...|           0|   58765|\n",
      "| 1024-10|       USD|1024-10-1|         Jd. Carombe|           1|   58766|\n",
      "| 1025-10|       USD|1025-10-0|Conexão Petrônio ...|           0|   58767|\n",
      "| 1025-10|       USD|1025-10-1|         Jd. Carombe|           1|   58768|\n",
      "| 1026-10|       USD|1026-10-0|Conexão Petrônio ...|           0|   60399|\n",
      "| 1026-10|       USD|1026-10-1|           Vila Iara|           1|   60400|\n",
      "| 1034-10|       USD|1034-10-0|  Conexão Vila Iório|           0|   60393|\n",
      "| 1034-10|       USD|1034-10-1|           Vila Iara|           1|   60394|\n",
      "| 1036-10|       USD|1036-10-0|  Conexão Vila Iório|           0|   61076|\n",
      "| 1036-10|       USD|1036-10-1|   Cohab Brasilândia|           1|   59459|\n",
      "| 106A-10|       USD|106A-10-0|          Itaim Bibi|           0|   60966|\n",
      "+--------+----------+---------+--------------------+------------+--------+\n",
      "only showing top 20 rows"
     ]
    }
   ],
   "source": [
    "trips.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# remember to treat the shape can not exists\n",
    "\n",
    "# selecting shapes for the trips\n",
    "shape_id_0 = trips.filter(\"trip_id == '\" + trip_id_0+ \"'\").collect()[0][\"shape_id\"]\n",
    "shape_id_1 = trips.filter(\"trip_id == '\" + trip_id_1+ \"'\").collect()[0][\"shape_id\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reading shapes\n",
    "shapes = spark.read.csv(\"s3a://mobility-traces-sp/aux-files/gtfs/shapes.csv\",header = 'true')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# selecting the points of the shapes\n",
    "shape_0 = shapes.filter(\"shape_id == '\" + shape_id_0+ \"'\")\n",
    "shape_1 = shapes.filter(\"shape_id == '\" + shape_id_1+ \"'\")\n",
    "\n",
    "shape_0.repartition(1).write.csv(\"s3://mobility-traces-sp/tests-map-matching/day_15101_shape_\"+shape_id_0+\"/\")\n",
    "shape_1.repartition(1).write.csv(\"s3://mobility-traces-sp/tests-map-matching/day_15101_shape_\"+shape_id_1+\"/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# selecting and saving traces with the line_id\n",
    "traces_selected = traces.filter(\"line_id == \"+ str(line_id))\n",
    "traces_selected.repartition(1).write.csv(\"s3://mobility-traces-sp/tests-map-matching/day_15101_line_\"+str(line_id)+\"/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "64aa3664627c4ef58a5c2cb73e9f1940",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# testing more buses and line\n",
    "# 119L,10,2273,1 - AL_15102\n",
    "# 8002,10,34020,2 - AL_15102\n",
    "traces_15102 = spark.read.parquet(\"s3a://mobility-traces-sp/processed-data/using-server-hour/records-between-6-23-only-sp-server-hour/MO_15102/\")\n",
    "\n",
    "# selecting and saving traces with the line_id 2273 and 34020\n",
    "traces_15102_line_2273 = traces_15102.filter(\"line_id == 2273\")\n",
    "traces_15102_line_34020 = traces_15102.filter(\"line_id == 34020\")\n",
    "\n",
    "traces_15102_line_2273.repartition(1).write.csv(\"s3://mobility-traces-sp/tests-map-matching/day_15102_line_2273/\")\n",
    "traces_15102_line_34020.repartition(1).write.csv(\"s3://mobility-traces-sp/tests-map-matching/day_15102_line_34020/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e0fe15f6ba7042a48fb2abf75dfe8d60",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# trip 119L-10-1, shape = 58447\n",
    "# trip 119L-10-0, shape = 58450\n",
    "# trip 8002-10-1, shape = 58290\n",
    "# trip 8002-10-0, shape = 58289\n",
    "\n",
    "# reading shapes\n",
    "shapes = spark.read.csv(\"s3a://mobility-traces-sp/aux-files/gtfs/shapes.csv\",header = 'true')\n",
    "\n",
    "# selecting the points of the shapes for trip 119L-10-X\n",
    "shape_58447 = shapes.filter(\"shape_id == 58447\")\n",
    "shape_58450 = shapes.filter(\"shape_id == 58450\")\n",
    "shape_58290 = shapes.filter(\"shape_id == 58290\")\n",
    "shape_58289 = shapes.filter(\"shape_id == 58289\")\n",
    "\n",
    "shape_58447.repartition(1).write.csv(\"s3://mobility-traces-sp/tests-map-matching/day_15102_shape_58447/\")\n",
    "shape_58450.repartition(1).write.csv(\"s3://mobility-traces-sp/tests-map-matching/day_15102_shape_58450/\")\n",
    "shape_58290.repartition(1).write.csv(\"s3://mobility-traces-sp/tests-map-matching/day_15102_shape_58290/\")\n",
    "shape_58289.repartition(1).write.csv(\"s3://mobility-traces-sp/tests-map-matching/day_15102_shape_58289/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "PySpark",
   "language": "",
   "name": "pysparkkernel"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "python",
    "version": 3
   },
   "mimetype": "text/x-python",
   "name": "pyspark",
   "pygments_lexer": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
